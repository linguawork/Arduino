
//all the files in one with buttons and a pattern

//arduino ino code: 
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <FastLED.h>

//#include <FS.h> // for serving html page
/**
the SPIFFS (SPI Flash File System) library
With this setup, when you access the ESP8266's IP address in a web browser, the index.html file will be served as the main web page. You can place your buttons and JavaScript functions inside this HTML file to control the LEDs on the LED matrix as described in the previous responses.

Please note that the SPIFFS file system has limited space, so if your HTML file is large or you plan to add more files in the future, you might need to consider alternative storage solutions.

*/
// Include the header file containing the HTML string
#include "webpage.h"

#define NUM_LEDS 64
#define DATA_PIN 0
CRGB leds[NUM_LEDS];

char j[11][9][9]={{"01000001","11111111","10000000","01111110","10000001","10000001","10000001","01111110"},
{"00000000","01001110","10010001","10010001","10010001","01111110","00000000","00000000"},
{"00000000","01110110","10001001","10001001","10001001","01110110","00000000","00000000"},
{"00000000","00000001","11100001","00010001","00001001","00000111","00000000","00000000"},
{"00000000","01111110","10001001","10001001","10001001","01110010","00000000","00000000"},
{"00000000","01001111","10001001","10001001","10001001","01110001","00000000","00000000"},
{"00000000","00110000","00101000","00100100","00100010","11111111","00100000","00000000"},
{"00000000","01000010","10000001","10001001","10001001","01110110","00000000","00000000"},
{"00000000","10000010","11000001","10100001","10010001","10001110","00000000","00000000"},
{"00000000","00000000","10000001","11111111","10000000","00000000","00000000","00000000"},
{"00011110","00111111","01111111","11111110","11111110","01111111","00111111","00011110"}};

const int ledPin = DATA_PIN;  // ESP8266 pin for controlling LED

// Setting wifi
const char* ssid = "42Wolfsburg_FabLab";
const char* password = "0nly5ky15theL1m17";

ESP8266WebServer server(80); // HTTP server port

void handleRoot() {
  server.send(200, "text/html", WEBPAGE_HTML); // Send the embedded HTML string
}

void handleLedControl() {
  int ledNumber = server.arg("id").toInt();
  String status = server.arg("status");

  if (status == "pattern")
  {
    display_counter(0);
  }
  else if (status == "not pattern")
  {
    int j = 0;
      while (j < 64){
        leds[j++] = CRGB::Black;
      }
  }
  else if (status == "true")
  {
    leds[ledNumber] = CRGB::White;
  }
  else if (status == "off")
  {
    int j = 0;
      while (j < 64){
        leds[j++] = CRGB::Black;
      }
  }
  else if (status == "on")
  {
    int j = 0;
      while (j < 64){
        leds[j++] = CRGB::White;
      }
  }
  else
  {
    leds[ledNumber].setHSV(0,0,0);
  }

  Serial.print("LED NUMBER: ");
  Serial.println(ledNumber);
  
   server.send(200, "text/plain", "Data received");
  FastLED.show(); // Update the LED display
}

void setup() {
   pinMode(ledPin, OUTPUT);
  Serial.begin(115200);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  Serial.println("IP to connect: " + WiFi.localIP().toString());

  
  // Start the server and handle root requests
  server.on("/", handleRoot);
  server.on("/led", HTTP_GET, handleLedControl); // Handle the button data
  server.begin();
  FastLED.addLeds<WS2812B,DATA_PIN,GRB>(leds,NUM_LEDS);
  FastLED.setBrightness(20);
}

void display_counter(int h)
{
  int ledpos = 0;
  for(; h < 11; h++)
  {
    ledpos = 0;
    for (int i = 0; i < 8;i++)
    {
      for (int k = 0; k < 8; k++)
      {
        if(j[h][i][k] == '1')
          leds[ledpos] = CRGB::White;
        else
          leds[ledpos] = CRGB::Black;
        ledpos++;
      }
    }
    delay(500);
    FastLED.show();
    delay(500);
  }
}
void loop() {
  //display_counter();
  server.handleClient();
}

//---------------------------
//here is the header file with webpage: 

#ifndef WEBPAGE_H
#define WEBPAGE_H

const char WEBPAGE_HTML[] PROGMEM = R"=====(
<!DOCTYPE html>
<html>
<head>
    <title>LED Matrix</title>
    <style>
        /* Style for the LED container */
        .led-matrix {
            display: grid;
            grid-template-columns: repeat(8, 40px); /* 8 columns */
            gap: 4px;
        }
        
        /* Style for individual LED items */
        .led-item {
            width: 40px;
            height: 40px;
            background-color: green;
            border: 2px solid #111;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8em;
            color: white;
        }

        /* Style for the buttons and checkbox */
        .button-container {
            margin-top: 20px;
        }
    </style>
</head>
<body>

<h2>LED Matrix</h2>

<div class="led-matrix">
    <script>
        for (let i = 0; i < 64; i++) {
            document.write(`
                <div class="led-item">
                    <input type="checkbox" id="led${i}" name="leds" value="${i}">
                    <label for="led${i}">${i}</label>
                </div>
            `);
        }
    </script>
</div>

<div class="button-container">
    <button id="turnOnAll">Turn On All</button>
    <button id="turnOffAll">Turn Off All</button>
    <label for="displayPattern">Display Pattern</label>
    <input type="checkbox" id="displayPattern" name="displayPattern">
</div>

<script>
const leds = document.getElementsByName("leds");
const turnOnAllButton = document.getElementById("turnOnAll");
const turnOffAllButton = document.getElementById("turnOffAll");
const displayPatternCheckbox = document.getElementById("displayPattern");

function update_color(x, color) {
    const elements = document.getElementsByClassName(x);
    for (var i = 0; i < elements.length; i++) {
        elements[i].style.backgroundColor = color;
    }
}

function send_request(id, status) {
    fetch(`/led?id=${id}&status=${status}`)
        .then(response => response.json())
        .then(data => {
            console.log("Request sent successfully:", data);
        })
        .catch(error => {
            console.error("Error sending request:", error);
        });
}

function updateLeds(event) {
    const led = event.target;
    const id = led.value;
    const status = led.checked ? "true" : "false";

    send_request(id, status);
}

function turnOnAll() {
    leds.forEach(led => {
        led.checked = true;
    });
    update_color("led-item", "mediumpurple");
    send_request(-1, "on");
}

function turnOffAll() {
    leds.forEach(led => {
        led.checked = false;
    });
    update_color("led-item", "green");
    send_request(-1, "off");
}
function toggleDisplayPattern() {
    const isChecked = displayPatternCheckbox.checked;
    if (isChecked) {
        send_request(-1, "pattern");
        leds.forEach(led => {
            led.checked = false;
        });
        update_color("led-item", "green");
    } else {
        leds.forEach(led => {
          led.checked = false;
        });
        update_color("led-item", "green");
        send_request(-1, "not pattern");
    }
}

for (let i = 0; i < leds.length; i++) {
    leds[i].addEventListener("change", updateLeds);
}

turnOnAllButton.addEventListener("click", turnOnAll);
turnOffAllButton.addEventListener("click", turnOffAll);
displayPatternCheckbox.addEventListener("change", toggleDisplayPattern);
</script>


)=====";

#endif

// done mandatory
